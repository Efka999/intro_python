Exprimer en la développant la négation des expressions booléennes suivantes :
1. (0 < x) and (x < 3)
2. (x < -2) or (x > 4)
3. a and (not b)
4. (not a) or b



Pour effectuer la conversion Fahrenheit ? Celcius, nous commençons par donner un nom à la
température Fahrenheit, par exemple tF , ainsi qu’à la température Celcius, par exemple tC. Puis
nous pouvons exprimer la relation générale qui lie tC à tF : 
tC = 5 / 9 * (tF - 32)

def fahrenheit_en_celcius( fahrenheit ):
    resultat = 5 / 9 * (fahrenheit-32)
    resultat = round(resultat,2)
    return(resultat)

def celcius_en_fahrenheit( celcius ):
    resultat = celcius * 9 / 5 + 32
    resultat = round(resultat,2)
    return(resultat)

temp_fahrenheit = input("Entrez une temp en fahrenheit : ")
tc = fahrenheit_en_celcius( float(temp_fahrenheit) )
print( "En celcius ", tc )

temp_celcius = input("Entrez une temp en celcius : ")
tf = celcius_en_fahrenheit( float(temp_celcius) )
print( "En fahrenheit ", tf )


import math

def fahrenheit_en_celsius(fahrenheit):
    resultat = 5 / 9 * (fahrenheit-32)
    resultat = math.floor(resultat)
    return(resultat)

def celsius_en_fahrenheit(celsius):
    resultat = celsius * 9 / 5 + 32
    resultat = math.floor(resultat)
    return(resultat)

print(" {}°F converti donne {}°C".format(70, fahrenheit_en_celsius(70) ))
print(" {}°C converti donne {}°F".format(21, celsius_en_fahrenheit(21) ))
print(" {}°F converti donne {}°C".format(90, fahrenheit_en_celsius(90) ))


Permuter les valeurs de 2 variables x et y
x=10
y=20

temp=y
y=x
x=temp

print(x,y)


Permutation circulaire de 3 variables x -> y -> z -> x
x=10
y=20
z=30

temp=z
z=y
y=x
x=temp

print(x,y,z)

Quelles sont les valeurs des variables a, b, q et r après la séquence d’affectations suivante ?
a = 19
b = 6
q = 0
r = a
r = r - b
q = q + 1
r = r - b
q = q + 1
r = r - b
q = q + 1

écrire l’algorithme qui détermine la valeur absolue y d’un nombre x

A pression ambiante, l’eau est sous forme de glace si la temp´erature est inférieure à 0?C, sous
forme de liquide si la température est comprise entre 0?C et 100?C et sous forme de vapeur
au-delà de 100?C.
Un algorithme qui devrait déterminer l’état de l’eau en fonction de la température doit pouvoir
choisir entre trois réponses possibles : solide, liquide ou vapeur.

temperature = 100

# premiere version
if temperature < 0 :    # temperature negative
    print("état solide")
elif temperature >= 100:
    print("etat gazeux")
else :
    print("etat liquide")

temperature = 120

#deuxieme version
if temperature < 0 :
    print("etat solide")
else :
    if temperature >= 100 :
        print("etat gazeux")
    else :
        print("etat liquide")

temperature = 150
# troisieme version
if temperature < 0 :
    print("etat solide")
if temperature >= 100 :
    print("etat gazeux")
if temperature >= 0 and temperature < 100 :
    print("etat liquide")
    

Les boucles:
for x in [1, 2, 3, 4]:
    print(x)

for x in range(10):
    print(x)

n=0
while n < 10 :
    print(n)
    n=n+1
    
reponse = ""
while reponse != "fin" :
    reponse = input("Votre mot:")
    

# version 1
s = "HelLo WorLd!!"
consonnes = ""
for lettre in s:
    # print(lettre)
    if lettre != 'a' and lettre != 'e' and lettre != 'i' and lettre != 'o' and lettre != 'u' and lettre != 'y' :
        consonnes = consonnes + lettre
print(consonnes)

# version 2
s = "HelLo WorLd!!"
voyelles = ( 'a', 'e', 'i', 'o', 'u', 'y')
consonnes = ""
for lettre in s:
    # print(lettre)
    if not lettre in voyelles :
        consonnes = consonnes + lettre
print(consonnes)

Ecrire son prenom à l'envers
s = "fabrice"
s2 = ""
for lettre in reversed(s):
    s2 += lettre
print(s2)

s = "fabrice"
s2 = ""
for i in range(len(s)-1, -1, -1):
    s2 += s[i]
print(s2)


1 - Crack mot de passe
Ecrire l'algorithme permettant de "deviner" le mot de passe d'un système en utilisant la technique brute-force.
Le système utilise les lettres de a à z, les chiffres de 0 à 9. écrire les combinaisons testées et compter le nombre de 
combinaisons pour un mot de passe d'une longueur de 4 caractères.


import string
import random

# fonction qui genere un mot de passe de num_lettre de longueur
def generer_password(num_lettre):
    mot_passe = ""
    # liste des caracteres autorises dans mot de passe
    liste_char = string.ascii_lowercase + string.digits

    for i in range(num_lettre):
        # determine un indice au hasard dans notre liste de caracteres
        hasard = random.randint(0, len(liste_char)-1 )
        # ajoute une nouvelle lettre au mot de passe
        mot_passe = mot_passe + liste_char[hasard]
    return(mot_passe)

# Generer un mot de passe aleatoire
long_pwd = 4
pwd_a_deviner = generer_password(long_pwd)
print(pwd_a_deviner)

# Boucle qui parcoure toutes les possibilites de mot de passe
liste_char = string.ascii_lowercase + string.digits
long_liste = len(liste_char) - 1
num_tentatives = 0

for i in range(0, long_liste):
    for j in range(0, long_liste):
        for k in range(0, long_liste):
            for l in range(0, long_liste):
                pwd = liste_char[i] + liste_char[j] +liste_char[k] +liste_char[l]
                #print(pwd)
                num_tentatives = num_tentatives + 1
                 # Tester si le mot de passe correspond au mot de passe genere
                if pwd == pwd_a_deviner :
                    print("Le mot de passe est ", pwd)
                    print("nombre tentatives ", num_tentatives)
                    break
                
   


2 - Distributeur de pièces:
Un distributeur dispose d'un stock illimité de pièces de 1, 2, 5 et 10 francs.
Ecrire le programme permettant de distribuer les sommes suivantes avec le minimum de pièces:
3 francs
7 francs
13 francs 
18 francs 
26 francs


3 - écrire le programme permettant de calculer la factorielle d'un nombre

# version iterative
num=3
factorielle = 1
for i in range(num,1,-1):
    factorielle = factorielle * i

print("Factorielle=",factorielle)

# version recursive
def factorielle(num):
    if num == 1:
        return(1)
    else:
        return( num*factorielle(num-1))

print("factorielle =", factorielle(4))

4 - écrire un programme permettant de calculer la suite de fibonacci
0 	1 	1 	2 	3 	5 	8 	13 	21 	34 	55 	89


